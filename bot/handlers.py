import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards import (
    get_cancel_keyboard,
    get_main_menu,
    get_habits_keyboard,
    get_check_habits_keyboard
)
from database.db import Database

logger = logging.getLogger(__name__)

router = Router()

db = Database()

class HabitStates(StatesGroup):
    waiting_for_habit_name = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª /start")
    db.add_user(user_id, user_name)

    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=get_main_menu())

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def button_add_habit(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'")
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–∏—Ç—å –≤–æ–¥—É, –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É, –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É", reply_markup=get_cancel_keyboard())
    await state.set_state(HabitStates.waiting_for_habit_name)

@router.message(HabitStates.waiting_for_habit_name, F.text != "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_habit_name(message: Message, state: FSMContext):
    habit_name = message.text.strip()
    user_id = message.from_user.id

    if len(habit_name) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    if len(habit_name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    db.add_habit(user_id, habit_name)

    await message.answer(
        f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_menu()
    )
    await state.clear()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def button_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())


@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
async def button_delete_habit(message: Message):
    user_id = message.from_user.id
    habits = db.get_all_habits(user_id)

    if not habits:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n"
                             "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'", reply_markup=get_main_menu())
        return

    await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n", reply_markup=get_habits_keyboard(habits))

@router.message(F.text == "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
async def button_list_habits(message: Message):
    user_id = message.from_user.id
    habits = db.get_all_habits(user_id)

    if not habits:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'", reply_markup=get_main_menu())
        return


    text = "üìã –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for idx, habit in enumerate(habits, 1):
        habit_id, name, created_at = habit
        text += f"{idx}. {name}\n"

    await message.answer(text, reply_markup=get_main_menu())

@router.message(F.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def button_check_habits(message: Message):
    user_id = message.from_user.id
    habits = db.get_all_habits(user_id)

    if not habits:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n"
                             "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'", reply_markup=get_main_menu())
        return

    completed_today = []
    for habit in habits:
        habit_id = habit[0]
        if db.is_habit_done_today(habit_id):
            completed_today.append(habit_id)

    await message.answer("‚úÖ –û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
        "‚≠ï - –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
        "‚úÖ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", reply_markup=get_check_habits_keyboard(habits, completed_today))


@router.callback_query(F.data.startswith("check_"))
async def callback_check_habits(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_habits = db.get_all_habits(user_id)
    user_habit_ids = [h[0] for h in user_habits]
    if habit_id not in user_habit_ids:
        await callback.answer("‚ùå –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç", show_alert=True)
        return

    # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habit_name = None
    for habit in user_habits:
        if habit[0] == habit_id:
            habit_name = habit[1]
            break

    if db.is_habit_done_today(habit_id):
        await callback.answer("‚ÑπÔ∏è –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è", show_alert=True)
        return

    db.mark_habit_done(habit_id)

    habits = db.get_all_habits(user_id)
    completed_today = []
    for habit in habits:
        if db.is_habit_done_today(habit[0]):
            completed_today.append(habit[0])

    await callback.message.edit_reply_markup(reply_markup=get_check_habits_keyboard(habits, completed_today))

    await callback.answer(f"üéâ –û—Ç–ª–∏—á–Ω–æ! '{habit_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

@router.callback_query(F.data.startswith("uncheck_"))
async def callback_uncheck_habits(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_habits = db.get_all_habits(user_id)
    user_habits_ids = [h[0] for h in user_habits]
    if habit_id not in user_habits_ids:
        await callback.answer("‚ùå –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç", show_alert=True)
        return

    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habit_name = None
    for habit in user_habits:
        if habit[0] == habit_id:
            habit_name = habit[1]
            break

    if not db.is_habit_done_today(habit_id):
        await callback.answer("‚ÑπÔ∏è –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–º–µ—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è", show_alert=True)
        return

    db.mark_habit_not_done(habit_id)

    habits = db.get_all_habits(user_id)
    completed_today = []
    for habit in habits:
        if db.is_habit_done_today(habit[0]):
            completed_today.append(habit[0])

    await callback.message.edit_reply_markup(reply_markup=get_check_habits_keyboard(habits, completed_today))

    await callback.answer(f"‚Ü©Ô∏è –û—Ç–º–µ—Ç–∫–∞ –¥–ª—è '{habit_name}' –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def button_help(message: Message):
    await message.answer("üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üí° –°–æ–≤–µ—Ç: –û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, "
        "—á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!", reply_markup=get_main_menu())


@router.callback_query(F.data.startswith("delete_"))
async def callback_delete_habit(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_habits = db.get_all_habits(user_id)
    user_habits_ids = [h[0] for h in user_habits]
    if habit_id not in user_habits_ids:
        await callback.answer("‚ùå –≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç", show_alert=True)
        return

    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habit_name = None
    for habit in user_habits:
        if habit[0] == habit_id:
            habit_name = habit[1]
            break

    db.delete_habit(habit_id, user_id)
    habits_after_delete = db.get_all_habits(user_id)
    if len(habits_after_delete) == 0:

        await callback.message.edit_text("üìã –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'", reply_markup=None)
    else:
        db.delete_habit(habit_id, user_id)
        habits = db.get_all_habits(user_id)
        await callback.message.edit_reply_markup(reply_markup=get_habits_keyboard(habits))

    await callback.answer(f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É–¥–∞–ª–µ–Ω–∞")